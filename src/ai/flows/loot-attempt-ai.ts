// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview AI tool to determine if an NPC attempts to steal the user's loot after combat.
 *
 * - shouldAttemptLootSteal - A function that determines whether an NPC attempts to steal loot.
 * - LootAttemptInput - The input type for the shouldAttemptLootSteal function.
 * - LootAttemptOutput - The return type for the shouldAttemptLootSteal function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const LootAttemptInputSchema = z.object({
  npcGreed: z
    .number()
    .describe('The greed level of the NPC (0-100). Higher values indicate more greed.'),
  npcPowerRelative: z
    .number()
    .describe(
      'The NPC power relative to the player (-100 to 100). Negative values mean weaker, positive values mean stronger.'
    ),
  npcRelationshipToPlayer: z
    .number()
    .describe(
      'The relationship of the NPC to the player (-100 to 100). Negative values mean hostile, positive values mean friendly.'
    ),
  otherPlayersNearby: z
    .number()
    .describe('The number of other players nearby who might intervene.'),
});

export type LootAttemptInput = z.infer<typeof LootAttemptInputSchema>;

const LootAttemptOutputSchema = z.object({
  attemptSteal: z
    .boolean()
    .describe(
      'Whether the NPC will attempt to steal the loot. True means attempt to steal, false means do not steal.'
    ),
  reasoning: z
    .string()
    .describe('The detailed reasoning behind the decision to steal or not.'),
});

export type LootAttemptOutput = z.infer<typeof LootAttemptOutputSchema>;

export async function shouldAttemptLootSteal(
  input: LootAttemptInput
): Promise<LootAttemptOutput> {
  return lootAttemptFlow(input);
}

const prompt = ai.definePrompt({
  name: 'lootAttemptPrompt',
  input: {schema: LootAttemptInputSchema},
  output: {schema: LootAttemptOutputSchema},
  prompt: `You are the ultimate game master. Determine if an NPC will attempt to steal loot from the player after combat, considering the following factors:

  NPC Greed: {{npcGreed}} (0-100, higher is greedier)
  NPC Power Relative to Player: {{npcPowerRelative}} (-100 to 100, negative is weaker, positive is stronger)
  NPC Relationship to Player: {{npcRelationshipToPlayer}} (-100 to 100, negative is hostile, positive is friendly)
  Other Players Nearby: {{otherPlayersNearby}} (Number of other players who might intervene)

  Based on these factors, decide whether the NPC will attempt to steal the loot.

  Consider a greedy, powerful, and hostile NPC as much more likely to steal. A weak, friendly NPC is unlikely to steal.
  The presence of other players should deter stealing, especially if the NPC is weaker or has a positive relationship with the player.
`,
});

const lootAttemptFlow = ai.defineFlow(
  {
    name: 'lootAttemptFlow',
    inputSchema: LootAttemptInputSchema,
    outputSchema: LootAttemptOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
